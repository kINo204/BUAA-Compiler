        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall

	# global fib_B0_0: i32 = 0
.data
	fib_B0_0: .word 0
	# global fib_B1_0: i32 = 0
	fib_B1_0: .word 0
	# global fib_B2_0: i32 = 0
	fib_B2_0: .word 0
	# global fib_B3_0: i32 = 0
	fib_B3_0: .word 0
	# global fib_B4_0: i32 = 0
	fib_B4_0: .word 0
	# global main_B0_0: i32 = 0
	main_B0_0: .word 0
	# global main_B1_0: i32 = 0
	main_B1_0: .word 0
	# global main_B2_0: i32 = 0
	main_B2_0: .word 0
	# global main_B3_0: i32 = 0
	main_B3_0: .word 0
	# global N_1: i32 = 10
	N_1: .word 10
	# global a_1[10]: i32 = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
	a_1: .word 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
	# define fun fib:
.text
fib:
	sw	$fp, -4($sp)
	move	$fp, $sp
	sw	$s0, -8($fp)
	lw	$s0, 4($fp)
	# %55: i32 = fib_B0_0 + 1
	# $t0 <= fib_B0_0
	la	$gp, fib_B0_0
	lw	$t0, 0($gp)
	# $t1 <= %55
	addi	$t1, $t0, 1
	# fib_B0_0: i32 = %55
	# $t0 => fib_B0_0
	# $t1 <= fib_B0_0
	# %1: i32 = i_2 == 1
	# $t0 <= 1
	li	$t0, 1
	# $t2 <= %1
	seq	$t2, $s0, $t0
	# if false %1 goto  $L0
	la	$gp, fib_B0_0
	sw	$t1, 0($gp)
	sw	$t1, -12($fp)
	sw	$t2, -16($fp)
	beq	$t2, $zero, $L0

	# %56: i32 = fib_B1_0 + 1
	# $t0 <= fib_B1_0
	la	$gp, fib_B1_0
	lw	$t0, 0($gp)
	# $t1 <= %56
	addi	$t1, $t0, 1
	# fib_B1_0: i32 = %56
	# $t0 => fib_B1_0
	# $t1 <= fib_B1_0
	# ret: i32  1
	li	$v0, 1
	sw	$t1, -20($fp)
	la	$gp, fib_B1_0
	sw	$t1, 0($gp)
	lw	$s0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# $L0:
$L0:
	# %57: i32 = fib_B2_0 + 1
	# $t0 <= fib_B2_0
	la	$gp, fib_B2_0
	lw	$t0, 0($gp)
	# $t1 <= %57
	addi	$t1, $t0, 1
	# fib_B2_0: i32 = %57
	# $t0 => fib_B2_0
	# $t1 <= fib_B2_0
	# %2: i32 = i_2 == 2
	# $t0 <= 2
	li	$t0, 2
	# $t2 <= %2
	seq	$t2, $s0, $t0
	# if false %2 goto  $L1
	sw	$t1, -24($fp)
	la	$gp, fib_B2_0
	sw	$t1, 0($gp)
	sw	$t2, -28($fp)
	beq	$t2, $zero, $L1

	# %58: i32 = fib_B3_0 + 1
	# $t0 <= fib_B3_0
	la	$gp, fib_B3_0
	lw	$t0, 0($gp)
	# $t1 <= %58
	addi	$t1, $t0, 1
	# fib_B3_0: i32 = %58
	# $t0 => fib_B3_0
	# $t1 <= fib_B3_0
	# ret: i32  2
	li	$v0, 2
	sw	$t1, -32($fp)
	la	$gp, fib_B3_0
	sw	$t1, 0($gp)
	lw	$s0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# $L1:
$L1:
	# %59: i32 = fib_B4_0 + 1
	# $t0 <= fib_B4_0
	la	$gp, fib_B4_0
	lw	$t0, 0($gp)
	# $t1 <= %59
	addi	$t1, $t0, 1
	# fib_B4_0: i32 = %59
	# $t0 => fib_B4_0
	# $t1 <= fib_B4_0
	# %3: i32 = i_2 - 1
	# $t0 <= %3
	addi	$t0, $s0, -1
	# param: i32  %3
	sw	$t0, -36($fp)
	sw	$t1, -40($fp)
	la	$gp, fib_B4_0
	sw	$t1, 0($gp)
	sw	$t0, -44($fp)
	# %4 = call: i32  fib
	addi	$sp, $fp, -48
	sw	$ra, 0($sp)
	jal	fib

	lw	$ra, 0($sp)
	addi	$sp, $fp, -40
	# $t0 <= %4
	move	$t0, $v0
	# %5: i32 = i_2 - 2
	# $t1 <= %5
	addi	$t1, $s0, -2
	# param: i32  %5
	sw	$t0, -44($fp)
	sw	$t1, -48($fp)
	sw	$t1, -52($fp)
	# %6 = call: i32  fib
	addi	$sp, $fp, -56
	sw	$ra, 0($sp)
	jal	fib

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# $t0 <= %6
	move	$t0, $v0
	# %7: i32 = %4 + %6
	# $t1 <= %4
	lw	$t1, -44($fp)
	# $t2 <= %7
	addu	$t2, $t1, $t0
	# ret: i32  %7
	move	$v0, $t2
	sw	$t0, -52($fp)
	sw	$t2, -56($fp)
	lw	$s0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun main:
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# %60: i32 = main_B0_0 + 1
	# $t0 <= main_B0_0
	la	$gp, main_B0_0
	lw	$t0, 0($gp)
	# $t1 <= %60
	addi	$t1, $t0, 1
	# main_B0_0: i32 = %60
	# $t0 => main_B0_0
	# $t1 <= main_B0_0
	# i_5 = alloc: i32
	# j_5 = alloc: i32
	# %1 = call: i32  getint
	sw	$t1, -16($fp)
	la	$gp, main_B0_0
	sw	$t1, 0($gp)
	addi	$sp, $fp, -20
	sw	$ra, 0($sp)
	jal	getint

	lw	$ra, 0($sp)
	addi	$sp, $fp, -16
	# $t0 <= %1
	move	$t0, $v0
	# i_5: i32 = %1
	move	$s0, $t0
	# %2 = call: i32  getint
	sw	$t0, -20($fp)
	addi	$sp, $fp, -24
	sw	$ra, 0($sp)
	jal	getint

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# $t0 <= %2
	move	$t0, $v0
	# j_5: i32 = %2
	move	$s1, $t0
	# %3: i32 = i_5 * j_5
	# $t1 <= %3
	mulu	$t1, $s0, $s1
	# %4: i32 = 0 - %3
	# $t2 <= 0
	li	$t2, 0
	# $t3 <= %4
	subu	$t3, $t2, $t1
	# param: i32  4
	sw	$t0, -24($fp)
	sw	$t1, -28($fp)
	sw	$t3, -32($fp)
	li	$a0, 4
	sw	$a0, -36($fp)
	# %5 = call: i32  fib
	addi	$sp, $fp, -40
	sw	$ra, 0($sp)
	jal	fib

	lw	$ra, 0($sp)
	addi	$sp, $fp, -32
	# $t0 <= %5
	move	$t0, $v0
	# %6: i32 = %4 * %5
	# $t1 <= %4
	lw	$t1, -32($fp)
	# $t2 <= %6
	mulu	$t2, $t1, $t0
	# %7: i32 = a_1[1]
	# $t3 <= a_1[1]
	la	$gp, a_1
	lw	$t3, 4($gp)
	# $t3 <= %7
	# %8: i32 = %7
	# $t3 <= %8
	# %10: i32 = %6
	# $t2 <= %10
	# %11: i32 = %10 + %8
	# $t4 <= %11
	addu	$t4, $t2, $t3
	# %12: i32 = %11
	# $t4 <= %12
	# %13: i32 = %12 / 5
	# $t5 <= 5
	li	$t5, 5
	# $t6 <= %13
	div	$t4, $t5
	mflo	$t6
	# i_5: i32 = %13
	move	$s0, $t6
	# param: i32  5
	sw	$t0, -36($fp)
	sw	$t2, -40($fp)
	sw	$t2, -44($fp)
	sw	$t3, -48($fp)
	sw	$t3, -52($fp)
	sw	$t4, -56($fp)
	sw	$t4, -60($fp)
	sw	$t6, -64($fp)
	sw	$t5, -68($fp)
	# %17 = call: i32  fib
	addi	$sp, $fp, -72
	sw	$ra, 0($sp)
	jal	fib

	lw	$ra, 0($sp)
	addi	$sp, $fp, -64
	# $t0 <= %17
	move	$t0, $v0
	# %18: i32 = %17 + 2
	# $t1 <= %18
	addi	$t1, $t0, 2
	# param: i32  %18
	sw	$t0, -68($fp)
	sw	$t1, -72($fp)
	sw	$t1, -76($fp)
	# %19 = call: i32  fib
	addi	$sp, $fp, -80
	sw	$ra, 0($sp)
	jal	fib

	lw	$ra, 0($sp)
	addi	$sp, $fp, -72
	# $t0 <= %19
	move	$t0, $v0
	# %20: i32 = 1197 - %19
	# $t1 <= 1197
	li	$t1, 1197
	# $t2 <= %20
	subu	$t2, $t1, $t0
	# %21: i32 = %20 + -10091
	# $t3 <= %21
	addi	$t3, $t2, -10091
	# j_5: i32 = %21
	move	$s1, $t3
	# k_5 = alloc: i32
	# k_5: i32 = -6
	# $t4 <= -6
	li	$t4, -6
	move	$s2, $t4
	# %22: i32 = a_1[0]
	# $t5 <= a_1[0]
	la	$gp, a_1
	lw	$t5, 0($gp)
	# $t5 <= %22
	# %23: i32 = i_5 * i_5
	# $t6 <= %23
	mulu	$t6, $s0, $s0
	# %24: i32 = %22 + %23
	# $t7 <= %24
	addu	$t7, $t5, $t6
	# a_1[0]: i32 = %24
	# $t5 => a_1[0]
	# $t7 <= a_1[0]
	# %25: i32 = a_1[1]
	# $t8 <= a_1[1]
	la	$gp, a_1
	lw	$t8, 4($gp)
	# $t8 <= %25
	# %26: i32 = i_5 * i_5
	# $t9 <= %26
	mulu	$t9, $s0, $s0
	# %27: i32 = %25 + %26
	# $t0 => %19
	sw	$t0, -80($fp)
	# $t0 <= %27
	addu	$t0, $t8, $t9
	# a_1[1]: i32 = %27
	# $t8 => a_1[1]
	# $t0 <= a_1[1]
	# %28: i32 = a_1[2]
	# $t1 => 1197
	# $t1 <= a_1[2]
	la	$gp, a_1
	lw	$t1, 8($gp)
	# $t1 <= %28
	# %29: i32 = i_5 * i_5
	# $t2 => %20
	sw	$t2, -84($fp)
	# $t2 <= %29
	mulu	$t2, $s0, $s0
	# %30: i32 = %28 + %29
	# $t3 => %21
	sw	$t3, -88($fp)
	# $t3 <= %30
	addu	$t3, $t1, $t2
	# a_1[2]: i32 = %30
	# $t1 => a_1[2]
	# $t3 <= a_1[2]
	# %31: i32 = a_1[3]
	# $t4 => -6
	# $t4 <= a_1[3]
	la	$gp, a_1
	lw	$t4, 12($gp)
	# $t4 <= %31
	# %32: i32 = i_5 * i_5
	# $t5 => %22
	sw	$t5, -92($fp)
	# $t5 <= %32
	mulu	$t5, $s0, $s0
	# %33: i32 = %31 + %32
	# $t6 => %23
	sw	$t6, -96($fp)
	# $t6 <= %33
	addu	$t6, $t4, $t5
	# a_1[3]: i32 = %33
	# $t4 => a_1[3]
	# $t6 <= a_1[3]
	# %34: i32 = a_1[4]
	# $t7 => a_1[0]
	la	$gp, a_1
	sw	$t7, 0($gp)
	# $t7 => %24
	sw	$t7, -100($fp)
	# $t7 <= a_1[4]
	la	$gp, a_1
	lw	$t7, 16($gp)
	# $t7 <= %34
	# %35: i32 = i_5 * i_5
	# $t8 => %25
	sw	$t8, -104($fp)
	# $t8 <= %35
	mulu	$t8, $s0, $s0
	# %36: i32 = %34 + %35
	# $t9 => %26
	sw	$t9, -108($fp)
	# $t9 <= %36
	addu	$t9, $t7, $t8
	# a_1[4]: i32 = %36
	# $t7 => a_1[4]
	# $t9 <= a_1[4]
	# %37: i32 = a_1[5]
	# $t0 => a_1[1]
	la	$gp, a_1
	sw	$t0, 4($gp)
	# $t0 => %27
	sw	$t0, -112($fp)
	# $t0 <= a_1[5]
	la	$gp, a_1
	lw	$t0, 20($gp)
	# $t0 <= %37
	# %38: i32 = i_5 * i_5
	# $t1 => %28
	sw	$t1, -116($fp)
	# $t1 <= %38
	mulu	$t1, $s0, $s0
	# %39: i32 = %37 + %38
	# $t2 => %29
	sw	$t2, -120($fp)
	# $t2 <= %39
	addu	$t2, $t0, $t1
	# a_1[5]: i32 = %39
	# $t0 => a_1[5]
	# $t2 <= a_1[5]
	# %40: i32 = a_1[6]
	# $t3 => %30
	sw	$t3, -124($fp)
	# $t3 => a_1[2]
	la	$gp, a_1
	sw	$t3, 8($gp)
	# $t3 <= a_1[6]
	la	$gp, a_1
	lw	$t3, 24($gp)
	# $t3 <= %40
	# %41: i32 = i_5 * i_5
	# $t4 => %31
	sw	$t4, -128($fp)
	# $t4 <= %41
	mulu	$t4, $s0, $s0
	# %42: i32 = %40 + %41
	# $t5 => %32
	sw	$t5, -132($fp)
	# $t5 <= %42
	addu	$t5, $t3, $t4
	# a_1[6]: i32 = %42
	# $t3 => a_1[6]
	# $t5 <= a_1[6]
	# %43: i32 = a_1[7]
	# $t6 => %33
	sw	$t6, -136($fp)
	# $t6 => a_1[3]
	la	$gp, a_1
	sw	$t6, 12($gp)
	# $t6 <= a_1[7]
	la	$gp, a_1
	lw	$t6, 28($gp)
	# $t6 <= %43
	# %44: i32 = i_5 * i_5
	# $t7 => %34
	sw	$t7, -140($fp)
	# $t7 <= %44
	mulu	$t7, $s0, $s0
	# %45: i32 = %43 + %44
	# $t8 => %35
	sw	$t8, -144($fp)
	# $t8 <= %45
	addu	$t8, $t6, $t7
	# a_1[7]: i32 = %45
	# $t6 => a_1[7]
	# $t8 <= a_1[7]
	# %46: i32 = a_1[8]
	# $t9 => %36
	sw	$t9, -148($fp)
	# $t9 => a_1[4]
	la	$gp, a_1
	sw	$t9, 16($gp)
	# $t9 <= a_1[8]
	la	$gp, a_1
	lw	$t9, 32($gp)
	# $t9 <= %46
	# %47: i32 = i_5 * i_5
	# $t0 => %37
	sw	$t0, -152($fp)
	# $t0 <= %47
	mulu	$t0, $s0, $s0
	# %48: i32 = %46 + %47
	# $t1 => %38
	sw	$t1, -156($fp)
	# $t1 <= %48
	addu	$t1, $t9, $t0
	# a_1[8]: i32 = %48
	# $t9 => a_1[8]
	# $t1 <= a_1[8]
	# %49: i32 = a_1[9]
	# $t2 => %39
	sw	$t2, -160($fp)
	# $t2 => a_1[5]
	la	$gp, a_1
	sw	$t2, 20($gp)
	# $t2 <= a_1[9]
	la	$gp, a_1
	lw	$t2, 36($gp)
	# $t2 <= %49
	# %50: i32 = i_5 * i_5
	# $t3 => %40
	sw	$t3, -164($fp)
	# $t3 <= %50
	mulu	$t3, $s0, $s0
	# %51: i32 = %49 + %50
	# $t4 => %41
	sw	$t4, -168($fp)
	# $t4 <= %51
	addu	$t4, $t2, $t3
	# a_1[9]: i32 = %51
	# $t2 => a_1[9]
	# $t4 <= a_1[9]
	# i_5: i32 = 0
	# $t5 => a_1[6]
	la	$gp, a_1
	sw	$t5, 24($gp)
	# $t5 => %42
	sw	$t5, -172($fp)
	# $t5 <= 0
	li	$t5, 0
	move	$s0, $t5
	# $L3:
	sw	$t0, -176($fp)
	la	$gp, a_1
	sw	$t1, 32($gp)
	sw	$t1, -180($fp)
	sw	$t2, -184($fp)
	sw	$t3, -188($fp)
	sw	$t4, -192($fp)
	la	$gp, a_1
	sw	$t4, 36($gp)
	sw	$t6, -196($fp)
	sw	$t7, -200($fp)
	la	$gp, a_1
	sw	$t8, 28($gp)
	sw	$t8, -204($fp)
	sw	$t9, -208($fp)
$L3:
	# %61: i32 = main_B1_0 + 1
	# $t0 <= main_B1_0
	la	$gp, main_B1_0
	lw	$t0, 0($gp)
	# $t1 <= %61
	addi	$t1, $t0, 1
	# main_B1_0: i32 = %61
	# $t0 => main_B1_0
	# $t1 <= main_B1_0
	# %52: i32 = i_5 < 10
	# $t0 <= 10
	li	$t0, 10
	# $t2 <= %52
	slt	$t2, $s0, $t0
	# if false %52 goto  $L2
	la	$gp, main_B1_0
	sw	$t1, 0($gp)
	sw	$t1, -212($fp)
	sw	$t2, -216($fp)
	beq	$t2, $zero, $L2

	# %62: i32 = main_B2_0 + 1
	# $t0 <= main_B2_0
	la	$gp, main_B2_0
	lw	$t0, 0($gp)
	# $t1 <= %62
	addi	$t1, $t0, 1
	# main_B2_0: i32 = %62
	# $t0 => main_B2_0
	# $t1 <= main_B2_0
	# %53: i32 = a_1[i_5]
	# $t0 <= %53
	move	$v1, $s0
	la	$gp, a_1
	sll	$v1, $v1, 2
	addu	$gp, $gp, $v1
	lw	$t0, 0($gp)
	# param: i32  %53
	move	$a0, $t0
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  44
	li	$a0, 44
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  32
	li	$a0, 32
	# call: void  putchar
	syscall	
	# %54: i32 = i_5 + 1
	# $t2 <= %54
	addi	$t2, $s0, 1
	# i_5: i32 = %54
	move	$s0, $t2
	# goto  $L3
	sw	$t0, -220($fp)
	sw	$t1, -224($fp)
	la	$gp, main_B2_0
	sw	$t1, 0($gp)
	sw	$t2, -228($fp)
	j	$L3

	# $L2:
$L2:
	# %63: i32 = main_B3_0 + 1
	# $t0 <= main_B3_0
	la	$gp, main_B3_0
	lw	$t0, 0($gp)
	# $t1 <= %63
	addi	$t1, $t0, 1
	# main_B3_0: i32 = %63
	# $t0 => main_B3_0
	# $t1 <= main_B3_0
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i32  i_5
	move	$a0, $s0
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  44
	li	$a0, 44
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  32
	li	$a0, 32
	# call: void  putchar
	syscall	
	# param: i32  j_5
	move	$a0, $s1
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  44
	li	$a0, 44
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  32
	li	$a0, 32
	# call: void  putchar
	syscall	
	# param: i32  k_5
	move	$a0, $s2
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  10
	li	$a0, 10
	# call: void  putchar
	syscall	
	# param: i8  80
	li	$a0, 80
	# call: void  putchar
	syscall	
	# param: i8  114
	li	$a0, 114
	# call: void  putchar
	syscall	
	# param: i8  111
	li	$a0, 111
	# call: void  putchar
	syscall	
	# param: i8  102
	li	$a0, 102
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  108
	li	$a0, 108
	# call: void  putchar
	syscall	
	# param: i8  101
	li	$a0, 101
	# call: void  putchar
	syscall	
	# param: i8  32
	li	$a0, 32
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  110
	li	$a0, 110
	# call: void  putchar
	syscall	
	# param: i8  102
	li	$a0, 102
	# call: void  putchar
	syscall	
	# param: i8  111
	li	$a0, 111
	# call: void  putchar
	syscall	
	# param: i8  58
	li	$a0, 58
	# call: void  putchar
	syscall	
	# param: i8  10
	li	$a0, 10
	# call: void  putchar
	syscall	
	# param: i8  102
	li	$a0, 102
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  98
	li	$a0, 98
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  48
	li	$a0, 48
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  fib_b0_0
	la	$gp, fib_B0_0
	lw	$a0, 0($gp)
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  102
	li	$a0, 102
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  98
	li	$a0, 98
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  49
	li	$a0, 49
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  fib_b1_0
	la	$gp, fib_B1_0
	lw	$a0, 0($gp)
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  102
	li	$a0, 102
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  98
	li	$a0, 98
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  50
	li	$a0, 50
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  fib_b2_0
	la	$gp, fib_B2_0
	lw	$a0, 0($gp)
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  102
	li	$a0, 102
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  98
	li	$a0, 98
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  51
	li	$a0, 51
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  fib_b3_0
	la	$gp, fib_B3_0
	lw	$a0, 0($gp)
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  102
	li	$a0, 102
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  98
	li	$a0, 98
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  52
	li	$a0, 52
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  fib_b4_0
	la	$gp, fib_B4_0
	lw	$a0, 0($gp)
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  109
	li	$a0, 109
	# call: void  putchar
	syscall	
	# param: i8  97
	li	$a0, 97
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  110
	li	$a0, 110
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  48
	li	$a0, 48
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  main_b0_0
	la	$gp, main_B0_0
	lw	$a0, 0($gp)
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  109
	li	$a0, 109
	# call: void  putchar
	syscall	
	# param: i8  97
	li	$a0, 97
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  110
	li	$a0, 110
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  49
	li	$a0, 49
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  main_b1_0
	la	$gp, main_B1_0
	lw	$a0, 0($gp)
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  109
	li	$a0, 109
	# call: void  putchar
	syscall	
	# param: i8  97
	li	$a0, 97
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  110
	li	$a0, 110
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  50
	li	$a0, 50
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  main_b2_0
	la	$gp, main_B2_0
	lw	$a0, 0($gp)
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# param: i8  109
	li	$a0, 109
	# call: void  putchar
	syscall	
	# param: i8  97
	li	$a0, 97
	# call: void  putchar
	syscall	
	# param: i8  105
	li	$a0, 105
	# call: void  putchar
	syscall	
	# param: i8  110
	li	$a0, 110
	# call: void  putchar
	syscall	
	# param: i8  95
	li	$a0, 95
	# call: void  putchar
	syscall	
	# param: i8  66
	li	$a0, 66
	# call: void  putchar
	syscall	
	# param: i8  51
	li	$a0, 51
	# call: void  putchar
	syscall	
	# param: i8  9
	li	$a0, 9
	# call: void  putchar
	syscall	
	# param: i32  main_b3_0
	move	$a0, $t1
	li	$v0, 1
	# call: void  putint
	syscall	
	# param: i8  10
	li	$a0, 10
	li	$v0, 11
	# call: void  putchar
	syscall	
	# ret: i32  0
	li	$v0, 0
	la	$gp, main_B3_0
	sw	$t1, 0($gp)
	sw	$t1, -232($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw      $fp, -4($sp)
        move    $fp, $sp
        addi    $sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw  $fp, -4($sp)
        jr  $ra

