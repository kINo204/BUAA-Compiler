        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall


	# define fun main:
.text
main:
	sw	$fp, -4($sp)
	move	$fp, $sp

	# a_2 = alloc: i32

	# a_2: i32 = 0
	li	$v0, 0
	sw	$v0, -8($fp)

	# b_2 = alloc: i32  2

	# b_2[0]: i32 = 0
	li	$v0, 0
	sw	$v0, -16($fp)

	# b_2[1]: i32 = 0
	li	$v0, 0
	sw	$v0, -12($fp)

	# %1: i32 = a_2
	lw	$v0, -8($fp)
	sw	$v0, -20($fp)

	# %2: i32 = b_2[%1]
	lw	$t9, -20($fp)
	sll	$t9, $t9, 2
	addu	$t9, $fp, $t9
	lw	$v0, -16($t9)
	sw	$v0, -24($fp)

	# param: i8  %2
	lw	$a0, -24($fp)
	sb	$a0, -25($fp)

	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -24

	# ret: i32  0
	li	$v0, 0
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw      $fp, -4($sp)
        move    $fp, $sp
        addi    $sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw  $fp, -4($sp)
        jr  $ra

