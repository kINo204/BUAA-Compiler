        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall

        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra


	# fun count:
	addi	$sp, $sp, 0
	addi	$sp, $sp, 0
.text
count:
	sw	$fp, -4($sp)
	move	$fp, $sp
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4

	# @2.res = alloc: i32

	# @2.res: i32 = 0
	li	$v0, 0
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -8($fp)

	# @2.i = alloc: i32

	# @2.i: i32 = 1
	li	$v0, 1
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -12($fp)

	# $L0_for_cond:
$L0_for_cond:

	# %1: i32 = @2.i
	lw	$v0, -12($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -16($fp)

	# %2: i32 = @2.max
	lw	$v0, 4($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -20($fp)

	# %3 = gre: i32  %1, %2
	lw	$v0, -16($fp)
	lw	$v1, -20($fp)
	sgt	$v0, $v0, $v1
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -24($fp)

	# if not %3 goto  $L3_if_else
	lw	$v0, -24($fp)
	beq	$v0, $zero, $L3_if_else


	# goto  $L2_for_end
	j	$L2_for_end


	# goto  $L4_if_end
	j	$L4_if_end


	# $L3_if_else:
$L3_if_else:

	# %4: i32 = @2.i
	lw	$v0, -12($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -28($fp)

	# %5: i32 = @2.max
	lw	$v0, 4($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -32($fp)

	# %6 = leq: i32  %4, %5
	lw	$v0, -28($fp)
	lw	$v1, -32($fp)
	sle	$v0, $v0, $v1
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -36($fp)

	# if not %6 goto  $L5_if_end
	lw	$v0, -36($fp)
	beq	$v0, $zero, $L5_if_end


	# %7: i32 = @2.res
	lw	$v0, -8($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -40($fp)

	# %8: i32 = @2.i
	lw	$v0, -12($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -44($fp)

	# %9 = add: i32  %7, %8
	lw	$v0, -40($fp)
	lw	$v1, -44($fp)
	addu	$v0, $v0, $v1
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -48($fp)

	# @2.res: i32 = %9
	lw	$v0, -48($fp)
	sw	$v0, -8($fp)

	# goto  $L1_for_motion
	j	$L1_for_motion


	# $L5_if_end:
$L5_if_end:

	# $L4_if_end:
$L4_if_end:

	# $L1_for_motion:
$L1_for_motion:

	# %10: i32 = @2.i
	lw	$v0, -12($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -52($fp)

	# %11 = add: i32  %10, 1
	lw	$v0, -52($fp)
	addi	$v0, $v0, 1
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -56($fp)

	# @2.i: i32 = %11
	lw	$v0, -56($fp)
	sw	$v0, -12($fp)

	# goto  $L0_for_cond
	j	$L0_for_cond


	# $L2_for_end:
$L2_for_end:

	# %12: i32 = @2.res
	lw	$v0, -8($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -60($fp)

	# ret: i32  %12
	lw	$v0, -60($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


	# fun main:
	addi	$sp, $sp, 0
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4

	# @6.sum = alloc: i32

	# param  100
	addi	$sp, $sp, 0
	li	$a0, 100
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$a0, -8($fp)

	# %1 = call: i32  count
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$ra, 0($sp)
	jal	count

	lw	$ra, 0($sp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -16($fp)
	addi	$sp, $fp, -4

	# @6.sum: i32 = %1
	lw	$v0, -16($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -8($fp)

	# %2: i32 = @6.sum
	lw	$v0, -8($fp)
	addi	$sp, $sp, 0
	addi	$sp, $sp, -4
	sw	$v0, -12($fp)

	# ret: i32  %2
	lw	$v0, -12($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

