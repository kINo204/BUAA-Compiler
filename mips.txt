        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall

        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra


	# global a_1: i32 = 1
.data
	a_1: .word 1

	# global b_1[2]: i32 = 2, 3
	b_1: .word 2, 3

	# global c_1: i8 = 65
	c_1: .byte 65

	# global d_1[3]: i8 = 66, 67, 0
	d_1: .byte 66, 67, 0

	# global a1_1: i32 = 0
	a1_1: .word 0

	# global b1_1[2]: i32 = 0, 0
	b1_1: .word 0, 0

	# global c1_1: i8 = 0
	c1_1: .byte 0

	# global d1_1[3]: i8 = 0, 0, 0
	d1_1: .byte 0, 0, 0

	# fun main:
.text
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	addi	$sp, $sp, -4

	# %1: i8 = d_1[2]
	la	$gp, d_1
	lb	$v0, 2($gp)
	addi	$sp, $sp, -1
	sb	$v0, -5($fp)

	# ret: i8  %1
	lb	$v0, -5($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

