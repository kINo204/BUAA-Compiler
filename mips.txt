        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall

	# global globalInt_1: i32 = 10
.data
	globalInt_1: .word 10
	# global globalChar_1: i8 = 97
	globalChar_1: .byte 97
	# global globalIntArray_1[100]: i32 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	globalIntArray_1: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	# global globalCharArray_1[100]: i8 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	globalCharArray_1: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	# define fun printInt:
.text
printInt:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# param: i32  value_2
	lw	$a0, 4($fp)
	sw	$a0, -8($fp)
	# call: void  putint
	addi	$sp, $fp, -12
	sw	$ra, 0($sp)
	jal	putint

	lw	$ra, 0($sp)
	addi	$sp, $fp, -4
	# param: i8  10
	li	$a0, 10
	sb	$a0, -5($fp)
	# call: void  putchar
	addi	$sp, $fp, -12
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -4
	# ret
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun printChar:
printChar:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# param: i8  value_3
	lb	$a0, 7($fp)
	sb	$a0, -5($fp)
	# call: void  putchar
	addi	$sp, $fp, -12
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -4
	# param: i8  10
	li	$a0, 10
	sb	$a0, -5($fp)
	# call: void  putchar
	addi	$sp, $fp, -12
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -4
	# ret
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun updateArray:
updateArray:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# i_4 = alloc: i32
	# i_4: i32 = 0
	# $t0 <= 0
	li	$t0, 0
	# $t0 <= i_4
	# $L1:
	sw	$t0, -8($fp)
$L1:
	# %1: i32 = i_4 < size_4
	# $t0 <= i_4
	lw	$t0, -8($fp)
	# $t1 <= size_4
	lw	$t1, 8($fp)
	# $t2 <= %1
	slt	$t2, $t0, $t1
	# if false %1 goto  $L0
	sw	$t2, -12($fp)
	beq	$t2, $zero, $L0

	# *(arr_4)[i_4]: i32 = value_4
	# $t0 <= value_4
	lw	$t0, 4($fp)
	lw	$a0, -8($fp)
	lw	$gp, 12($fp)
	move	$a0, $a0
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	sw	$t0, 0($a0)
	# %2: i32 = i_4 + 1
	# $t1 <= i_4
	lw	$t1, -8($fp)
	# $t2 <= 1
	li	$t2, 1
	# $t3 <= %2
	addu	$t3, $t1, $t2
	# i_4: i32 = %2
	# $t1 => i_4
	# $t3 <= i_4
	# goto  $L1
	sw	$t3, -8($fp)
	sw	$t3, -16($fp)
	j	$L1

	# $L0:
$L0:
	# ret
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun processElements:
processElements:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# i_6 = alloc: i32
	# i_6: i32 = 0
	# $t0 <= 0
	li	$t0, 0
	# $t0 <= i_6
	# $L3:
	sw	$t0, -8($fp)
$L3:
	# %1: i32 = i_6 < size_6
	# $t0 <= i_6
	lw	$t0, -8($fp)
	# $t1 <= size_6
	lw	$t1, 12($fp)
	# $t2 <= %1
	slt	$t2, $t0, $t1
	# if false %1 goto  $L2
	sw	$t2, -12($fp)
	beq	$t2, $zero, $L2

	# %2: i32 = *(arr_6)[i_6]
	# $t0 <= %2
	lw	$a0, -8($fp)
	lw	$gp, 20($fp)
	move	$a0, $a0
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	lw	$t0, 0($a0)
	# %3: i32 = %2 * multiplier_6
	# $t1 <= multiplier_6
	lw	$t1, 8($fp)
	# $t2 <= %3
	mulu	$t2, $t0, $t1
	# *(arr_6)[i_6]: i32 = %3
	lw	$a0, -8($fp)
	lw	$gp, 20($fp)
	move	$a0, $a0
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	sw	$t2, 0($a0)
	# %4: i32 = *(arr_6)[i_6]
	# $t3 <= %4
	lw	$a0, -8($fp)
	lw	$gp, 20($fp)
	move	$a0, $a0
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	lw	$t3, 0($a0)
	# %5: i32 = %4 + addChar_6
	# $t4 <= addChar_6
	lb	$t4, 7($fp)
	# $t5 <= %5
	addu	$t5, $t3, $t4
	# *(carr_6)[i_6]: i8 = %5
	lw	$a0, -8($fp)
	lw	$gp, 16($fp)
	move	$a0, $a0
	addu	$a0, $a0, $gp
	sb	$t5, 0($a0)
	# %6: i32 = i_6 + 1
	# $t6 <= i_6
	lw	$t6, -8($fp)
	# $t7 <= 1
	li	$t7, 1
	# $t8 <= %6
	addu	$t8, $t6, $t7
	# i_6: i32 = %6
	# $t6 => i_6
	# $t8 <= i_6
	# goto  $L3
	sw	$t0, -16($fp)
	sw	$t2, -20($fp)
	sw	$t3, -24($fp)
	sw	$t5, -28($fp)
	sw	$t8, -8($fp)
	sw	$t8, -32($fp)
	j	$L3

	# $L2:
$L2:
	# ret
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun compareAndSum:
compareAndSum:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# sum_8 = alloc: i32
	# sum_8: i32 = 0
	# $t0 <= 0
	li	$t0, 0
	# $t0 <= sum_8
	# %1: i32 = 0
	# $t0 <= %1
	# %2: i32 = a_8 > b_8
	# $t1 <= a_8
	lw	$t1, 16($fp)
	# $t2 <= b_8
	lw	$t2, 12($fp)
	# $t3 <= %2
	sgt	$t3, $t1, $t2
	# if false %2 goto  $L4
	sw	$t0, -12($fp)
	sw	$t0, -8($fp)
	sw	$t3, -16($fp)
	beq	$t3, $zero, $L4

	# %3: i32 = c_8 < d_8
	# $t0 <= c_8
	lw	$t0, 8($fp)
	# $t1 <= d_8
	lw	$t1, 4($fp)
	# $t2 <= %3
	slt	$t2, $t0, $t1
	# if false %3 goto  $L4
	sw	$t2, -20($fp)
	beq	$t2, $zero, $L4

	# %1: i32 = 1
	# $t0 <= 1
	li	$t0, 1
	# $t0 <= %1
	# $L4:
	sw	$t0, -12($fp)
$L4:
	# if false %1 goto  $L5
	# $t0 <= %1
	lw	$t0, -12($fp)
	beq	$t0, $zero, $L5

	# %4: i32 = a_8 + c_8
	# $t0 <= a_8
	lw	$t0, 16($fp)
	# $t1 <= c_8
	lw	$t1, 8($fp)
	# $t2 <= %4
	addu	$t2, $t0, $t1
	# sum_8: i32 = %4
	# $t2 <= sum_8
	# goto  $L6
	sw	$t2, -24($fp)
	sw	$t2, -8($fp)
	j	$L6

	# $L5:
$L5:
	# %5: i32 = b_8 + d_8
	# $t0 <= b_8
	lw	$t0, 12($fp)
	# $t1 <= d_8
	lw	$t1, 4($fp)
	# $t2 <= %5
	addu	$t2, $t0, $t1
	# sum_8: i32 = %5
	# $t2 <= sum_8
	# $L6:
	sw	$t2, -8($fp)
	sw	$t2, -28($fp)
$L6:
	# ret: i32  sum_8
	lw	$v0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun complexOperation:
complexOperation:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# i_11 = alloc: i32
	# param: i32  arr_11
	lw	$a0, 24($fp)
	sw	$a0, -12($fp)
	# param: i32  size_11
	lw	$a0, 16($fp)
	sw	$a0, -16($fp)
	# param: i32  multiplier_11
	lw	$a0, 12($fp)
	sw	$a0, -20($fp)
	# call: void  updatearray
	addi	$sp, $fp, -24
	sw	$ra, 0($sp)
	jal	updateArray

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i32  arr_11
	lw	$a0, 24($fp)
	sw	$a0, -12($fp)
	# param: i32  carr_11
	lw	$a0, 20($fp)
	sw	$a0, -16($fp)
	# param: i32  size_11
	lw	$a0, 16($fp)
	sw	$a0, -20($fp)
	# param: i32  multiplier_11
	lw	$a0, 12($fp)
	sw	$a0, -24($fp)
	# param: i8  addchar_11
	lb	$a0, 11($fp)
	sb	$a0, -25($fp)
	# call: void  processelements
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	processElements

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# i_11: i32 = 0
	# $t0 <= 0
	li	$t0, 0
	# $t0 <= i_11
	# $L10:
	sw	$t0, -8($fp)
$L10:
	# %1: i32 = i_11 < size_11
	# $t0 <= i_11
	lw	$t0, -8($fp)
	# $t1 <= size_11
	lw	$t1, 16($fp)
	# $t2 <= %1
	slt	$t2, $t0, $t1
	# if false %1 goto  $L7
	sw	$t2, -12($fp)
	beq	$t2, $zero, $L7

	# %2: i32 = *(arr_11)[i_11]
	# $t0 <= %2
	lw	$a0, -8($fp)
	lw	$gp, 24($fp)
	move	$a0, $a0
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	lw	$t0, 0($a0)
	# %3: i32 = %2 > threshold_11
	# $t1 <= threshold_11
	lw	$t1, 4($fp)
	# $t2 <= %3
	sgt	$t2, $t0, $t1
	# if false %3 goto  $L8
	sw	$t0, -16($fp)
	sw	$t2, -20($fp)
	beq	$t2, $zero, $L8

	# %4: i32 = *(arr_11)[i_11]
	# $t0 <= %4
	lw	$a0, -8($fp)
	lw	$gp, 24($fp)
	move	$a0, $a0
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	lw	$t0, 0($a0)
	# param: i32  %4
	sw	$t0, -24($fp)
	move	$a0, $t0
	sw	$a0, -28($fp)
	# call: void  printint
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	printInt

	lw	$ra, 0($sp)
	addi	$sp, $fp, -24
	# goto  $L9
	j	$L9

	# $L8:
$L8:
	# %5: i8 = *(carr_11)[i_11]
	# $t0 <= %5
	lw	$a0, -8($fp)
	lw	$gp, 20($fp)
	move	$a0, $a0
	addu	$a0, $a0, $gp
	lb	$t0, 0($a0)
	# param: i8  %5
	sb	$t0, -25($fp)
	move	$a0, $t0
	sb	$a0, -29($fp)
	# call: void  printchar
	addi	$sp, $fp, -36
	sw	$ra, 0($sp)
	jal	printChar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -25
	# $L9:
$L9:
	# %6: i32 = i_11 + 1
	# $t0 <= i_11
	lw	$t0, -8($fp)
	# $t1 <= 1
	li	$t1, 1
	# $t2 <= %6
	addu	$t2, $t0, $t1
	# i_11: i32 = %6
	# $t0 => i_11
	# $t2 <= i_11
	# goto  $L10
	sw	$t2, -32($fp)
	sw	$t2, -8($fp)
	j	$L10

	# $L7:
$L7:
	# ret
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun main:
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# mainint_15 = alloc: i32
	# mainInt_15: i32 = 5
	# $t0 <= 5
	li	$t0, 5
	# $t0 <= mainInt_15
	# mainchar_15 = alloc: i8
	# mainChar_15: i8 = 122
	# $t1 <= 122
	li	$t1, 122
	# $t2 <= mainChar_15
	andi	$t2, $t1, 255
	# localint_15 = alloc: i32
	# localInt_15: i32 = 3
	# $t3 <= 3
	li	$t3, 3
	# $t3 <= localInt_15
	# localchar_15 = alloc: i8
	# localChar_15: i8 = 121
	# $t4 <= 121
	li	$t4, 121
	# $t5 <= localChar_15
	andi	$t5, $t4, 255
	# size_15 = alloc: i32
	# size_15: i32 = 10
	# $t6 <= 10
	li	$t6, 10
	# $t6 <= size_15
	# %1: &i32 = &(globalIntArray_1)
	# $t7 <= %1
	la	$t7, globalIntArray_1
	# param: i32  %1
	sw	$t0, -8($fp)
	sb	$t2, -9($fp)
	sw	$t3, -16($fp)
	sb	$t5, -17($fp)
	sw	$t6, -24($fp)
	sw	$t7, -28($fp)
	move	$a0, $t7
	sw	$a0, -32($fp)
	# param: i32  size_15
	move	$a0, $t6
	sw	$a0, -36($fp)
	# param: i32  globalint_1
	la	$gp, globalInt_1
	lw	$a0, 0($gp)
	sw	$a0, -40($fp)
	# call: void  updatearray
	addi	$sp, $fp, -44
	sw	$ra, 0($sp)
	jal	updateArray

	lw	$ra, 0($sp)
	addi	$sp, $fp, -28
	# i_15 = alloc: i32
	# i_15: i32 = 0
	# $t0 <= 0
	li	$t0, 0
	# $t0 <= i_15
	# $L12:
	sw	$t0, -32($fp)
$L12:
	# %2: i32 = i_15 < size_15
	# $t0 <= i_15
	lw	$t0, -32($fp)
	# $t1 <= size_15
	lw	$t1, -24($fp)
	# $t2 <= %2
	slt	$t2, $t0, $t1
	# if false %2 goto  $L11
	sw	$t2, -36($fp)
	beq	$t2, $zero, $L11

	# globalCharArray_1[i_15]: i8 = globalChar_1
	# $t0 <= globalChar_1
	la	$gp, globalChar_1
	lb	$t0, 0($gp)
	lw	$v1, -32($fp)
	move	$v1, $v1
	la	$gp, globalCharArray_1
	addu	$gp, $gp, $v1
	sb	$t0, 0($gp)
	# %3: i32 = i_15 + 1
	# $t1 <= i_15
	lw	$t1, -32($fp)
	# $t2 <= 1
	li	$t2, 1
	# $t3 <= %3
	addu	$t3, $t1, $t2
	# i_15: i32 = %3
	# $t1 => i_15
	# $t3 <= i_15
	# goto  $L12
	sw	$t3, -40($fp)
	sw	$t3, -32($fp)
	j	$L12

	# $L11:
$L11:
	# %4: &i32 = &(globalIntArray_1)
	# $t0 <= %4
	la	$t0, globalIntArray_1
	# %5: &i32 = &(globalCharArray_1)
	# $t1 <= %5
	la	$t1, globalCharArray_1
	# param: i32  %4
	sw	$t0, -44($fp)
	sw	$t1, -48($fp)
	move	$a0, $t0
	sw	$a0, -52($fp)
	# param: i32  %5
	move	$a0, $t1
	sw	$a0, -56($fp)
	# param: i32  size_15
	lw	$a0, -24($fp)
	sw	$a0, -60($fp)
	# param: i32  localint_15
	lw	$a0, -16($fp)
	sw	$a0, -64($fp)
	# param: i8  localchar_15
	lb	$a0, -17($fp)
	sb	$a0, -65($fp)
	# param: i32  20
	li	$a0, 20
	sw	$a0, -72($fp)
	# call: void  complexoperation
	addi	$sp, $fp, -76
	sw	$ra, 0($sp)
	jal	complexOperation

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# result_15 = alloc: i32
	# param: i32  globalint_1
	la	$gp, globalInt_1
	lw	$a0, 0($gp)
	sw	$a0, -56($fp)
	# param: i32  mainint_15
	lw	$a0, -8($fp)
	sw	$a0, -60($fp)
	# param: i32  localint_15
	lw	$a0, -16($fp)
	sw	$a0, -64($fp)
	# param: i32  8
	li	$a0, 8
	sw	$a0, -68($fp)
	# %6 = call: i32  compareandsum
	addi	$sp, $fp, -72
	sw	$ra, 0($sp)
	jal	compareAndSum

	lw	$ra, 0($sp)
	addi	$sp, $fp, -52
	# $t0 <= %6
	move	$t0, $v0
	# result_15: i32 = %6
	# $t0 <= result_15
	# param: i32  result_15
	sw	$t0, -52($fp)
	sw	$t0, -56($fp)
	move	$a0, $t0
	sw	$a0, -60($fp)
	# call: void  printint
	addi	$sp, $fp, -64
	sw	$ra, 0($sp)
	jal	printInt

	lw	$ra, 0($sp)
	addi	$sp, $fp, -56
	# ret: i32  0
	li	$v0, 0
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw      $fp, -4($sp)
        move    $fp, $sp
        addi    $sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw  $fp, -4($sp)
        jr  $ra

