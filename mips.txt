        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall

	# define fun main:
.text
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# %1: i32 = 1
	li	$t0, 1
	# if false %1 goto  $L0
	sw	$t0, -8($fp)
	beq	$t0, $zero, $L0

	# b_4 = alloc: i32  2
	# b_4[0]: i32 = 2
	li	$t0, 2
	# b_4[1]: i32 = 4
	li	$t1, 4
	# $L1:
	sw	$t0, -16($fp)
	sw	$t1, -12($fp)
$L1:
	# %2: i32 = b_4[1]
	lw	$t0, -12($fp)
	# %3: i32 = %2 <= 6
	li	$t1, 6
	sle	$t2, $t0, $t1
	# if false %3 goto  $L0
	sw	$t0, -20($fp)
	sw	$t2, -24($fp)
	beq	$t2, $zero, $L0

	# %4: i32 = b_4[1]
	lw	$t0, -12($fp)
	# param: i32  %4
	move	$a0, $t0
	li	$v0, 1
	# call: void  putint
	syscall	
	# %5: i32 = b_4[1]
	# %6: i32 = %5 + 1
	addi	$t1, $t0, 1
	# b_4[1]: i32 = %6
	# goto  $L1
	sw	$t0, -28($fp)
	sw	$t0, -32($fp)
	sw	$t1, -12($fp)
	sw	$t1, -36($fp)
	j	$L1

	# $L0:
$L0:
	# ret: i32  0
	li	$v0, 0
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw      $fp, -4($sp)
        move    $fp, $sp
        addi    $sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw  $fp, -4($sp)
        jr  $ra

