        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall

	# define fun func:
.text
func:
	sw	$fp, -4($sp)
	move	$fp, $sp
	sw	$t0, -8($fp)
	sw	$t1, -12($fp)
	sw	$t2, -16($fp)
	sw	$t3, -20($fp)
	sw	$t4, -24($fp)
	sw	$t5, -28($fp)
	sw	$t6, -32($fp)
	sw	$t7, -36($fp)
	sw	$t8, -40($fp)
	sw	$t9, -44($fp)
	# $L1:
$L1:
	# %1 = eql: i32  n_2, 0
	# $t0 <= n_2
	lw	$t0, 4($fp)
	# $t1 <= 0
	li	$t1, 0
	# $t2 <= %1
	seq	$t2, $t0, $t1
	# if false %1 goto  $L0
	sw	$t2, -48($fp)
	beq	$t2, $zero, $L0

	# ret: i32  n_2
	lw	$v0, 4($fp)
	lw	$t0, -8($fp)
	lw	$t1, -12($fp)
	lw	$t2, -16($fp)
	lw	$t3, -20($fp)
	lw	$t4, -24($fp)
	lw	$t5, -28($fp)
	lw	$t6, -32($fp)
	lw	$t7, -36($fp)
	lw	$t8, -40($fp)
	lw	$t9, -44($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# $L0:
$L0:
	# %2 = sub: i32  n_2, 1
	# $t0 <= n_2
	lw	$t0, 4($fp)
	# $t1 <= 1
	li	$t1, 1
	# $t2 <= %2
	subu	$t2, $t0, $t1
	# n_2: i32 = %2
	# $t0 => n_2
	# $t2 <= n_2
	# goto  $L1
	sw	$t2, -52($fp)
	sw	$t2, 4($fp)
	j	$L1

	# define fun main:
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# param: i32  4
	li	$a0, 4
	sw	$a0, -8($fp)
	# %1 = call: i32  func
	addi	$sp, $fp, -12
	sw	$ra, 0($sp)
	jal	func

	lw	$ra, 0($sp)
	addi	$sp, $fp, -4
	# $t0 <= %1
	move	$t0, $v0
	# ret: i32  0
	li	$v0, 0
	sw	$t0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw      $fp, -4($sp)
        move    $fp, $sp
        addi    $sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw  $fp, -4($sp)
        jr  $ra

