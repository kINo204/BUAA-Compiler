        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall

	# global a1_1[10]: i32 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.data
	a1_1: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	# global a2_1[5]: i32 = 0, 0, 0, 0, 0
	a2_1: .word 0, 0, 0, 0, 0
	# global a3_1[5]: i32 = 0, 0, 0, 0, 0
	a3_1: .word 0, 0, 0, 0, 0
	# global a4_1[5]: i32 = 1, 2, 3, 0, 0
	a4_1: .word 1, 2, 3, 0, 0
	# global c1_1[10]: i8 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	c1_1: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	# global c2_1[5]: i8 = 0, 0, 0, 0, 0
	c2_1: .byte 0, 0, 0, 0, 0
	# global c3_1[5]: i8 = 0, 0, 0, 0, 0
	c3_1: .byte 0, 0, 0, 0, 0
	# global c4_1[5]: i8 = 104, 101, 121, 0, 0
	c4_1: .byte 104, 101, 121, 0, 0
	# global c5_1[10]: i8 = 104, 101, 108, 108, 111, 0, 0, 0, 0, 0
	c5_1: .byte 104, 101, 108, 108, 111, 0, 0, 0, 0, 0
	# define fun f1:
.text
f1:
	sw	$fp, -4($sp)
	move	$fp, $sp
	sw	$s0, -8($fp)
	sw	$s1, -12($fp)
	sw	$s2, -16($fp)
	lw	$s1, 4($fp)
	# sum_2 = alloc: i32
	# sum_2: i32 = 0
	# $t0 <= 0
	li	$t0, 0
	move	$s2, $t0
	# i_2 = alloc: i32
	# i_2: i32 = 0
	move	$s0, $t0
	# $L1:
$L1:
	# %1: i32 = i_2 < len_2
	# $t0 <= %1
	slt	$t0, $s0, $s1
	# if false %1 goto  $L0
	sw	$t0, -28($fp)
	beq	$t0, $zero, $L0

	# %2: i32 = *(a_2)[i_2]
	# $t0 <= %2
	lw	$gp, 8($fp)
	move	$a0, $s0
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	lw	$t0, 0($a0)
	# %3: i32 = sum_2 + %2
	# $t1 <= %3
	addu	$t1, $s2, $t0
	# sum_2: i32 = %3
	move	$s2, $t1
	# %4: i32 = i_2 + 1
	# $t2 <= %4
	addi	$t2, $s0, 1
	# i_2: i32 = %4
	move	$s0, $t2
	# goto  $L1
	sw	$t0, -32($fp)
	sw	$t1, -36($fp)
	sw	$t2, -40($fp)
	j	$L1

	# $L0:
$L0:
	# ret: i32  sum_2
	move	$v0, $s2
	lw	$s0, -8($fp)
	lw	$s1, -12($fp)
	lw	$s2, -16($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun f2:
f2:
	sw	$fp, -4($sp)
	move	$fp, $sp
	sw	$s0, -8($fp)
	lw	$s0, 4($fp)
	# %1: i32 = n_4 == 1
	# $t0 <= 1
	li	$t0, 1
	# $t1 <= %1
	seq	$t1, $s0, $t0
	# if false %1 goto  $L2
	sw	$t1, -12($fp)
	beq	$t1, $zero, $L2

	# ret: i32  1
	li	$v0, 1
	lw	$s0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# $L2:
$L2:
	# %2: i32 = n_4 == 2
	# $t0 <= 2
	li	$t0, 2
	# $t1 <= %2
	seq	$t1, $s0, $t0
	# if false %2 goto  $L3
	sw	$t1, -16($fp)
	beq	$t1, $zero, $L3

	# ret: i32  1
	li	$v0, 1
	lw	$s0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# $L3:
$L3:
	# %3: i32 = n_4 - 1
	# $t0 <= %3
	addi	$t0, $s0, -1
	# param: i32  %3
	sw	$t0, -20($fp)
	sw	$t0, -24($fp)
	# %4 = call: i32  f2
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	f2

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# $t0 <= %4
	move	$t0, $v0
	# %5: i32 = n_4 - 2
	# $t1 <= %5
	addi	$t1, $s0, -2
	# param: i32  %5
	sw	$t0, -24($fp)
	sw	$t1, -28($fp)
	sw	$t1, -32($fp)
	# %6 = call: i32  f2
	addi	$sp, $fp, -36
	sw	$ra, 0($sp)
	jal	f2

	lw	$ra, 0($sp)
	addi	$sp, $fp, -28
	# $t0 <= %6
	move	$t0, $v0
	# %7: i32 = %4 + %6
	# $t1 <= %4
	lw	$t1, -24($fp)
	# $t2 <= %7
	addu	$t2, $t1, $t0
	# ret: i32  %7
	move	$v0, $t2
	sw	$t0, -32($fp)
	sw	$t2, -36($fp)
	lw	$s0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun f3:
f3:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# %1: i8 = *(s_5)[0]
	# $t0 <= s_5[0]
	lw	$gp, 4($fp)
	lb	$t0, 0($gp)
	# $t0 <= %1
	# param: i8  %1
	sb	$t0, -5($fp)
	sb	$t0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -5
	# param: i8  10
	li	$a0, 10
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -5
	# ret
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun f4:
f4:
	sw	$fp, -4($sp)
	move	$fp, $sp
	sw	$s0, -8($fp)
	sw	$s1, -12($fp)
	sw	$s2, -16($fp)
	lw	$s0, 4($fp)
	# i_6 = alloc: i32
	# sum_6 = alloc: i32
	# sum_6: i32 = 0
	# $t0 <= 0
	li	$t0, 0
	move	$s1, $t0
	# i_6: i32 = 0
	move	$s2, $t0
	# $L5:
$L5:
	# %1: i32 = i_6 < len_6
	# $t0 <= %1
	slt	$t0, $s2, $s0
	# if false %1 goto  $L4
	sw	$t0, -28($fp)
	beq	$t0, $zero, $L4

	# %2: i32 = *(a_6)[i_6]
	# $t0 <= %2
	lw	$gp, 12($fp)
	move	$a0, $s2
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	lw	$t0, 0($a0)
	# %3: i32 = *(b_6)[i_6]
	# $t1 <= %3
	lw	$gp, 8($fp)
	move	$a0, $s2
	sll	$a0, $a0, 2
	addu	$a0, $a0, $gp
	lw	$t1, 0($a0)
	# %4: i32 = %2 * %3
	# $t2 <= %4
	mulu	$t2, $t0, $t1
	# %5: i32 = sum_6 + %4
	# $t3 <= %5
	addu	$t3, $s1, $t2
	# sum_6: i32 = %5
	move	$s1, $t3
	# %6: i32 = i_6 + 1
	# $t4 <= %6
	addi	$t4, $s2, 1
	# i_6: i32 = %6
	move	$s2, $t4
	# goto  $L5
	sw	$t0, -32($fp)
	sw	$t1, -36($fp)
	sw	$t2, -40($fp)
	sw	$t3, -44($fp)
	sw	$t4, -48($fp)
	j	$L5

	# $L4:
$L4:
	# ret: i32  sum_6
	move	$v0, $s1
	lw	$s0, -8($fp)
	lw	$s1, -12($fp)
	lw	$s2, -16($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

	# define fun main:
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# n_8 = alloc: i32
	# param: i8  50
	li	$a0, 50
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i8  49
	li	$a0, 49
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i8  51
	li	$a0, 51
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i8  55
	li	$a0, 55
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i8  52
	li	$a0, 52
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i8  50
	li	$a0, 50
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i8  55
	li	$a0, 55
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i8  53
	li	$a0, 53
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# param: i8  10
	li	$a0, 10
	sb	$a0, -9($fp)
	# call: void  putchar
	addi	$sp, $fp, -16
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -8
	# a4_1[3]: i32 = 4
	# $t0 <= 4
	li	$t0, 4
	# $t0 <= a4_1[3]
	# a4_1[4]: i32 = 5
	# $t1 <= 5
	li	$t1, 5
	# $t1 <= a4_1[4]
	# sum_8 = alloc: i32
	# %1: &i32 = &(a4_1)
	# $t2 <= %1
	la	$t2, a4_1
	# param: i32  %1
	la	$gp, a4_1
	sw	$t0, 12($gp)
	la	$gp, a4_1
	sw	$t1, 16($gp)
	sw	$t2, -16($fp)
	sw	$t2, -20($fp)
	# param: i32  5
	sw	$t1, -24($fp)
	# %2 = call: i32  f1
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	f1

	lw	$ra, 0($sp)
	addi	$sp, $fp, -16
	# $t0 <= %2
	move	$t0, $v0
	# sum_8: i32 = %2
	move	$s0, $t0
	# param: i8  115
	sw	$t0, -20($fp)
	li	$a0, 115
	sb	$a0, -21($fp)
	# call: void  putchar
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# param: i8  117
	li	$a0, 117
	sb	$a0, -21($fp)
	# call: void  putchar
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# param: i8  109
	li	$a0, 109
	sb	$a0, -21($fp)
	# call: void  putchar
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# param: i8  32
	li	$a0, 32
	sb	$a0, -21($fp)
	# call: void  putchar
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# param: i8  61
	li	$a0, 61
	sb	$a0, -21($fp)
	# call: void  putchar
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# param: i8  32
	li	$a0, 32
	sb	$a0, -21($fp)
	# call: void  putchar
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# param: i32  sum_8
	sw	$s0, -24($fp)
	# call: void  putint
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	putint

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# param: i8  10
	li	$a0, 10
	sb	$a0, -21($fp)
	# call: void  putchar
	addi	$sp, $fp, -28
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -20
	# %3: i8 = c4_1[0]
	# $t0 <= c4_1[0]
	la	$gp, c4_1
	lb	$t0, 0($gp)
	# $t0 <= %3
	# param: i8  99
	sb	$t0, -21($fp)
	li	$a0, 99
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  52
	li	$a0, 52
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  91
	li	$a0, 91
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  48
	li	$a0, 48
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  93
	li	$a0, 93
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  32
	li	$a0, 32
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  61
	li	$a0, 61
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  32
	li	$a0, 32
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  %3
	lb	$a0, -21($fp)
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# param: i8  10
	li	$a0, 10
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -21
	# %4: i8 = c5_1[0]
	# $t0 <= c5_1[0]
	la	$gp, c5_1
	lb	$t0, 0($gp)
	# $t0 <= %4
	# param: i8  99
	sb	$t0, -22($fp)
	li	$a0, 99
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  53
	li	$a0, 53
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  91
	li	$a0, 91
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  48
	li	$a0, 48
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  93
	li	$a0, 93
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  32
	li	$a0, 32
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  61
	li	$a0, 61
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  32
	li	$a0, 32
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  %4
	lb	$a0, -22($fp)
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# param: i8  10
	li	$a0, 10
	sb	$a0, -25($fp)
	# call: void  putchar
	addi	$sp, $fp, -32
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -22
	# t_8 = alloc: i32
	# %5: i32 = 100 + 1
	# $t0 <= 1
	li	$t0, 1
	# $t1 <= %5
	addi	$t1, $t0, 100
	# %6: i32 = %5 % 25
	# $t2 <= 25
	li	$t2, 25
	# $t3 <= %6
	div	$t1, $t2
	mfhi	$t3
	# %7: i32 = %6 * 5
	# $t4 <= 5
	li	$t4, 5
	# $t5 <= %7
	mulu	$t5, $t3, $t4
	# %8: i32 = 3 / 2
	# $t6 <= 3
	li	$t6, 3
	# $t7 <= 2
	li	$t7, 2
	# $t8 <= %8
	div	$t6, $t7
	mflo	$t8
	# %9: i32 = %7 - %8
	# $t9 <= %9
	subu	$t9, $t5, $t8
	# t_8: i32 = %9
	move	$s0, $t9
	# param: i8  116
	sw	$t1, -32($fp)
	sw	$t3, -36($fp)
	sw	$t5, -40($fp)
	sw	$t8, -44($fp)
	sw	$t9, -48($fp)
	li	$a0, 116
	sb	$a0, -49($fp)
	# call: void  putchar
	addi	$sp, $fp, -56
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# param: i8  32
	li	$a0, 32
	sb	$a0, -49($fp)
	# call: void  putchar
	addi	$sp, $fp, -56
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# param: i8  61
	li	$a0, 61
	sb	$a0, -49($fp)
	# call: void  putchar
	addi	$sp, $fp, -56
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# param: i8  32
	li	$a0, 32
	sb	$a0, -49($fp)
	# call: void  putchar
	addi	$sp, $fp, -56
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# param: i32  t_8
	sw	$s0, -52($fp)
	# call: void  putint
	addi	$sp, $fp, -56
	sw	$ra, 0($sp)
	jal	putint

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# param: i8  10
	li	$a0, 10
	sb	$a0, -49($fp)
	# call: void  putchar
	addi	$sp, $fp, -56
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# param: i32  10
	li	$a0, 10
	sw	$a0, -52($fp)
	# %10 = call: i32  f2
	addi	$sp, $fp, -56
	sw	$ra, 0($sp)
	jal	f2

	lw	$ra, 0($sp)
	addi	$sp, $fp, -48
	# $t0 <= %10
	move	$t0, $v0
	# t_8: i32 = %10
	move	$s0, $t0
	# param: i32  t_8
	sw	$t0, -52($fp)
	sw	$s0, -56($fp)
	# call: void  putint
	addi	$sp, $fp, -60
	sw	$ra, 0($sp)
	jal	putint

	lw	$ra, 0($sp)
	addi	$sp, $fp, -52
	# param: i8  10
	li	$a0, 10
	sb	$a0, -53($fp)
	# call: void  putchar
	addi	$sp, $fp, -60
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -52
	# s_8 = alloc: i8  10
	# s_8[0]: i8 = 49
	# $t0 <= 49
	li	$t0, 49
	# $t0 <= s_8[0]
	# s_8[1]: i8 = 50
	# $t1 <= 50
	li	$t1, 50
	# $t1 <= s_8[1]
	# s_8[2]: i8 = 51
	# $t2 <= 51
	li	$t2, 51
	# $t2 <= s_8[2]
	# s_8[3]: i8 = 52
	# $t3 <= 52
	li	$t3, 52
	# $t3 <= s_8[3]
	# s_8[4]: i8 = 53
	# $t4 <= 53
	li	$t4, 53
	# $t4 <= s_8[4]
	# s_8[5]: i8 = 54
	# $t5 <= 54
	li	$t5, 54
	# $t5 <= s_8[5]
	# s_8[6]: i8 = 0
	# $t6 <= 0
	li	$t6, 0
	# $t6 <= s_8[6]
	# s_8[7]: i8 = 0
	# $t7 <= 0
	li	$t7, 0
	# $t8 <= s_8[7]
	andi	$t8, $t7, 255
	# s_8[8]: i8 = 0
	# $t9 <= s_8[8]
	andi	$t9, $t7, 255
	# s_8[9]: i8 = 0
	# $t0 => s_8[0]
	sb	$t0, -62($fp)
	# $t0 => 49
	# $t0 <= s_8[9]
	andi	$t0, $t7, 255
	# %11: &i32 = &(s_8)
	# $t1 => 50
	# $t1 => s_8[1]
	sb	$t1, -61($fp)
	# $t1 <= %11
	addi	$t1, $fp, -62
	# param: i32  %11
	sb	$t0, -53($fp)
	sw	$t1, -68($fp)
	sb	$t2, -60($fp)
	sb	$t3, -59($fp)
	sb	$t4, -58($fp)
	sb	$t5, -57($fp)
	sb	$t6, -56($fp)
	sb	$t8, -55($fp)
	sb	$t9, -54($fp)
	sw	$t1, -72($fp)
	# call: void  f3
	addi	$sp, $fp, -76
	sw	$ra, 0($sp)
	jal	f3

	lw	$ra, 0($sp)
	addi	$sp, $fp, -68
	# %12: &i32 = &(c4_1)
	# $t0 <= %12
	la	$t0, c4_1
	# param: i32  %12
	sw	$t0, -72($fp)
	sw	$t0, -76($fp)
	# call: void  f3
	addi	$sp, $fp, -80
	sw	$ra, 0($sp)
	jal	f3

	lw	$ra, 0($sp)
	addi	$sp, $fp, -72
	# %13: &i32 = &(c5_1)
	# $t0 <= %13
	la	$t0, c5_1
	# param: i32  %13
	sw	$t0, -76($fp)
	sw	$t0, -80($fp)
	# call: void  f3
	addi	$sp, $fp, -84
	sw	$ra, 0($sp)
	jal	f3

	lw	$ra, 0($sp)
	addi	$sp, $fp, -76
	# a5_8 = alloc: i32  3
	# a5_8[0]: i32 = 2
	# $t0 <= 2
	li	$t0, 2
	# $t0 <= a5_8[0]
	# a5_8[1]: i32 = 3
	# $t1 <= 3
	li	$t1, 3
	# $t1 <= a5_8[1]
	# a5_8[2]: i32 = 4
	# $t2 <= 4
	li	$t2, 4
	# $t2 <= a5_8[2]
	# a6_8 = alloc: i32  3
	# a6_8[0]: i32 = 1
	# $t3 <= 1
	li	$t3, 1
	# $t3 <= a6_8[0]
	# a6_8[1]: i32 = 5
	# $t4 <= 5
	li	$t4, 5
	# $t4 <= a6_8[1]
	# a6_8[2]: i32 = 7
	# $t5 <= 7
	li	$t5, 7
	# $t5 <= a6_8[2]
	# %14: &i32 = &(a5_8)
	# $t6 <= %14
	addi	$t6, $fp, -88
	# %15: &i32 = &(a6_8)
	# $t7 <= %15
	addi	$t7, $fp, -100
	# %16: i32 = a5_8[1]
	# $t1 <= %16
	# param: i32  %14
	sw	$t0, -88($fp)
	sw	$t1, -104($fp)
	sw	$t1, -84($fp)
	sw	$t2, -80($fp)
	sw	$t3, -100($fp)
	sw	$t4, -96($fp)
	sw	$t5, -92($fp)
	sw	$t6, -108($fp)
	sw	$t7, -112($fp)
	sw	$t6, -116($fp)
	# param: i32  %15
	sw	$t7, -120($fp)
	# param: i32  %16
	sw	$t1, -124($fp)
	# %17 = call: i32  f4
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	f4

	lw	$ra, 0($sp)
	addi	$sp, $fp, -112
	# $t0 <= %17
	move	$t0, $v0
	# %18: i32 = %17 + 1
	# $t1 <= %18
	addi	$t1, $t0, 1
	# param: i8  115
	sw	$t0, -116($fp)
	sw	$t1, -120($fp)
	li	$a0, 115
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  117
	li	$a0, 117
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  109
	li	$a0, 109
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  32
	li	$a0, 32
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  43
	li	$a0, 43
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  32
	li	$a0, 32
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  49
	li	$a0, 49
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  32
	li	$a0, 32
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  61
	li	$a0, 61
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  32
	li	$a0, 32
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i32  %18
	lw	$a0, -120($fp)
	sw	$a0, -124($fp)
	# call: void  putint
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putint

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# param: i8  10
	li	$a0, 10
	sb	$a0, -121($fp)
	# call: void  putchar
	addi	$sp, $fp, -128
	sw	$ra, 0($sp)
	jal	putchar

	lw	$ra, 0($sp)
	addi	$sp, $fp, -120
	# ret: i32  0
	li	$v0, 0
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw      $fp, -4($sp)
        move    $fp, $sp
        addi    $sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw  $fp, -4($sp)
        jr  $ra

