        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall

	# define fun main:
.text
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	# a_2 = alloc: i32
	# a_2: i32 = 1
	# $t0 <= 1
	li	$t0, 1
	# $t0 <= a_2
	# b_2 = alloc: i32
	# %1 = add: i32  a_2, 2
	# $t1 <= 2
	li	$t1, 2
	# $t2 <= %1
	addu	$t2, $t0, $t1
	# b_2: i32 = %1
	# $t2 <= b_2
	# ret: i32  b_2
	move	$v0, $t2
	sw	$t0, -8($fp)
	sw	$t2, -16($fp)
	sw	$t2, -12($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw      $fp, -4($sp)
        move    $fp, $sp
        addi    $sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw  $fp, -4($sp)
        jr  $ra

