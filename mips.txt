        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall


	# define fun main:
.text
main:
	sw	$fp, -4($sp)
	move	$fp, $sp

	# i_2 = alloc: i32

	# i_2: i32 = 0
	li	$v0, 0
	sw	$v0, -8($fp)

	# if false 1 goto  $L0
	li	$v0, 1
	beq	$v0, $zero, $L0


	# a_3 = alloc: i32

	# goto  $L1
	j	$L1


	# $L0:
$L0:

	# if false 2 goto  $L2
	li	$v0, 2
	beq	$v0, $zero, $L2


	# b_4 = alloc: i32

	# goto  $L3
	j	$L3


	# $L2:
$L2:

	# c_5 = alloc: i32

	# $L3:
$L3:

	# $L1:
$L1:

	# ret: i32  0
	li	$v0, 0
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


        # [compiler-generated](lib_io)
.text
putchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lb  $a0, 7($fp)
        li  $v0, 11
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
putint:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        lw  $a0, 4($fp)
        li  $v0, 1
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getchar:
        sw	$fp, -4($sp)
        move	$fp, $sp
        addi	$sp, $sp, -4

        li  $v0, 12
        syscall

        move	$sp, $fp
        lw	$fp, -4($sp)
        jr  $ra

        # [compiler-generated](lib_io)
getint:
        sw      $fp, -4($sp)
        move    $fp, $sp
        addi    $sp, $sp, -4

        li  $v0, 5
        syscall

        move	$sp, $fp
        lw  $fp, -4($sp)
        jr  $ra

