        # [compiler-generated](os-wrapper)
        jal     main
        move    $a0, $v0
        li      $v0, 17
        syscall


	# fun test:
.text
test:
	sw	$fp, -4($sp)
	move	$fp, $sp
	addi	$sp, $sp, -4

	# %1: i32 = @2.p1
	lw	$v0, 4($fp)
	addi	$sp, $sp, -4
	sw	$v0, -8($fp)

	# ret: i32  %1
	lw	$v0, -8($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra


	# fun main:
main:
	sw	$fp, -4($sp)
	move	$fp, $sp
	addi	$sp, $sp, -4

	# @3.arr = alloc: i32  2

	# @3.arr[0]: i32 = 3
	li	$v0, 3
	addi	$sp, $sp, -8
	sw	$v0, -12($fp)

	# @3.arr[1]: i32 = 4
	li	$v0, 4
	sw	$v0, -16($fp)

	# %1: i32 = @3.arr[0]
	lw	$v0, -12($fp)
	addi	$sp, $sp, -4
	sw	$v0, -16($fp)

	# param  %1
	lw	$a0, -16($fp)
	addi	$sp, $sp, -4
	sw	$a0, -20($fp)

	# %2 = call: i32  test
	addi	$sp, $sp, -4
	sw	$ra, 0($sp)
	jal	test

	lw	$ra, 0($sp)
	addi	$sp, $sp, -4
	sw	$v0, -28($fp)

	# ret: i32  %2
	lw	$v0, -28($fp)
	move	$sp, $fp
	lw	$fp, -4($sp)
	jr	$ra

