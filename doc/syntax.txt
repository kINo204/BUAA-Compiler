BType (* Basic types *) (* No output *)
	: 'int'
	| 'char'
	;

CompUnit (* Compiler entry point *)
	: { Decl } { FuncDef } MainFuncDef
	;

	FuncDef 
		: FuncType Ident '(' [ FuncFParams ] ')' Block
		;

		FuncType 
			: 'void'
			| BType
			;

		FuncFParams 
			: FuncFParam { ',' FuncFParam }
			;

			FuncFParam 
				: BType Ident [ '[' ']' ]
				;

	MainFuncDef 
		: 'int' 'main' '(' ')' Block
		;

Block 
	: '{' { BlockItem } '}'
	;

	BlockItem  (* No output *)
		: Decl
		| Stmt
		;

Decl (* No output *)
	: ConstDecl | VarDecl
	;

	ConstDecl
		: 'const' BType ConstDef { ',' ConstDef } ';'
		;

		ConstDef 
			: Ident [ '[' ConstExp ']' ] '=' ConstInitVal
			;

			ConstInitVal 
			: ConstExp
			| '{' [ ConstExp { ',' ConstExp } ] '}'
			| StringConst
			;

	VarDecl 
		: BType VarDef { ',' VarDef } ';'
		;

		VarDef 
			: Ident [ '[' ConstExp ']' ] [ '=' InitVal ]
			;

			InitVal 
				: Exp
				| '{' [ Exp { ',' Exp } ] '}'  (* 0 or multi *)
				| StringConst
				;

Stmt 
	(* assign *)	: LVal '=' Exp ';'
	(* single *)	| [ Exp ] ';'
	(* Iint   *)	| LVal '=' 'getint' '(' ')' ';'
	(* Ichar  *)	| LVal '=' 'getchar' '(' ')' ';'
	
	(* block  *)	| Block
	(* ifstruct *)	| 'if' '(' Cond ')' Stmt [ 'else' Stmt ]
	(* forstruct *)	| 'for' '(' [ForStmt] ';' [Cond] ';' [ForStmt] ')' Stmt
	(* break  *)	| 'break' ';'
	(* continue *)	| 'continue' ';'
	(* return  *)	| 'return' [Exp] ';'
	(* Oprintf *)	| 'printf' '('StringConst { ',' Exp } ')' ';'
	;

	ForStmt 
		: LVal '=' Exp
		;

	Cond 
		: LOrExp
		;

Exp : AddExp ;
 
ConstExp : AddExp (* contains only ident for const vars *) ;

LOrExp 
	: LAndExp { '||' LAndExp }
	;

	LAndExp 
		: EqExp { '&&' EqExp }
		;

		EqExp 
			: RelExp { ('==' | '!=') RelExp }
			;

			RelExp 
				: AddExp { ('<' | '>' | '<=' | '>=') AddExp }
				;

AddExp 
	: MulExp { ('+' | '−') MulExp }
	;

	MulExp 
		: UnaryExp { ('*' | '/' | '%') UnaryExp }
		;

		UnaryExp 
			: PrimaryExp
			| Ident '(' [FuncRParams] ')'
			| UnaryOp UnaryExp
			;

			UnaryOp 
				: '+' | '−' | '!'
				;

			FuncRParams 
				: Exp { ',' Exp }
				;

			PrimaryExp 
				: '(' Exp ')'
				| LVal
				| Number
				| Character
				;
				    
				LVal 
					: Ident ['[' Exp ']']
					;

				Number 
					: IntConst
					;

				Character 
					: CharConst
					;


(* Terminals *)

Ident (* Vt *)
	: IdentNonDigit
	| Ident IdentNonDigit
	| Ident Digit
	;

	IdentNonDigit
		: REGEX( [_a-zA-Z] )
		;

IntConst(* Vt *)
	: '0'
	| DecimalConst
	;

	DecimalConst
		: NonZeroDigit
		| DecimalConst Digit
		;

CharConst(* Vt *)
	: '\'' Ascii '\''
	;

StringConst(* Vt *)
	: '\"' { Ascii } '\"'
	;

Digit
	: REGEX( [0-9] )
	;

Ascii
	: ASCII(32-126)
	| ASCII(7-10)
	| ASCII(0)
	| ASCII(92)
	;
