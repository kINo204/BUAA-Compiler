BType (* Basic types *)
	: 'int'
	| 'char'
	;

CompUnit
	: { Decl } { FuncDef } MainFuncDef
	;

	FuncDef 
		: FuncType Ident '(' [FuncFParams] ')' Block
		;

		FuncType 
			: 'void'
			| BType
			;

		FuncFParams 
			: FuncFParam { ',' FuncFParam }
			;

			FuncFParam 
				: BType Ident ['[' ']']
				;

	MainFuncDef 
		: 'int' 'main' '(' ')' Block
		;

Block 
	: '{' { BlockItem } '}'
	;

	BlockItem 
		: Decl
		| Stmt
		;

Decl
	: ConstDecl | VarDecl
	;

	ConstDecl
		: 'const' BType ConstDef { ',' ConstDef } ';'
		;

		ConstDef 
			: Ident [ '[' ConstExp ']' ] '=' ConstInitVal
			;

			ConstInitVal 
			: ConstExp
			| '{' [ ConstExp { ',' ConstExp } ] '}'
			| StringConst
			;

	VarDecl 
		: BType VarDef { ',' VarDef } ';'
		;

		VarDef 
			: Ident [ '=' InitVal ]
			| Ident '[' ConstExp ']' [ '=' InitVal ]
			;

			InitVal 
				: Exp
				| '{' [ Exp { ',' Exp } ] '}'
				| StringConst
				;

Stmt 
	(* assign *)	: LVal '=' Exp ';'
	(* single *)	| [Exp] ';'
	(* block  *)	| Block
	(* ifstruct *)	| 'if' '(' Cond ')' Stmt [ 'else' Stmt ]
	(* forstruct *)	| 'for' '(' [ForStmt] ';' [Cond] ';' [ForStmt] ')' Stmt
	(* break  *)	| 'break' ';'
	(* continue *)	| 'continue' ';'
	(* return  *)	| 'return' [Exp] ';'
	(* Iint   *)	| LVal '=' 'getint' '(' ')' ';'
	(* Ichar  *)	| LVal '=' 'getchar' '(' ')' ';'
	(* Oprintf *)	| 'printf' '('StringConst { ',' Exp } ')' ';'
	;

	ForStmt 
		: LVal '=' Exp
		;

	Cond 
		: LOrExp
		;

Exp : AddExp ;
 
ConstExp : AddExp (* contains only ident for const vars *) ;

LOrExp 
	: LAndExp
	| LOrExp '||' LAndExp
	;

	LAndExp 
		: EqExp
		| LAndExp '&&' EqExp
		;

		EqExp 
			: RelExp
			| EqExp ('==' | '!=') RelExp
			;

			RelExp 
				: AddExp
				| RelExp ('<' | '>' | '<=' | '>=') AddExp
				;

				AddExp 
					: MulExp
					| AddExp ('+' | '−') MulExp
					;

					MulExp 
						: UnaryExp
						| MulExp ('*' | '/' | '%') UnaryExp
						;

						UnaryExp 
							: PrimaryExp
							| Ident '(' [FuncRParams] ')'
							| UnaryOp UnaryExp
							;

							UnaryOp 
								: '+' | '−' | '!'
								;

							FuncRParams 
								: Exp { ',' Exp }
								;

							PrimaryExp 
								: '(' Exp ')'
								| LVal
								| Number
								| Character
								;
								    
								LVal 
									: Ident ['[' Exp ']']
									;

								Number 
									: IntConst
									;

								Character 
									: CharConst
									;

Ident
	: IdentNonDigit
	| Ident IdentNonDigit
	| Ident Digit
	;

	IdentNonDigit
		: REGEX( [_a-zA-Z] )
		;

IntConst
	: '0'
	| DecimalConst
	;

	DecimalConst
		: NonZeroDigit
		| DecimalConst Digit
		;

CharConst
	: '\'' Ascii '\''
	;

StringConst
	: '\"' { Ascii } '\"'
	;

Digit
	: REGEX( [0-9] )
	;

Ascii
	: ASCII(32-126)
	| ASCII(7-10)
	| ASCII(0)
	| ASCII(92)
	;
