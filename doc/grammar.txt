CompUnit
	: { Decl } { FuncDef } MainFuncDef
	;

Decl
	: ConstDecl | VarDecl
	;

ConstDecl
	: 'const' BType ConstDef { ',' ConstDef } ';'
	;

BType (* Basic types *)
	: 'int'
	| 'char'
	;

ConstDef 
	: Ident [ '[' ConstExp ']' ] '=' ConstInitVal
	;

ConstInitVal 
	: ConstExp
	| '{' [ ConstExp { ',' ConstExp } ] '}'
	| StringConst
	;

VarDecl 
	: BType VarDef { ',' VarDef } ';'
	;

VarDef 
	: Ident [ '=' InitVal ]
	| Ident '[' ConstExp ']' [ '=' InitVal ]
	;

InitVal 
	: Exp
	| '{' [ Exp { ',' Exp } ] '}'
	| StringConst
	;

FuncDef 
	: FuncType Ident '(' [FuncFParams] ')' Block
	;

MainFuncDef 
	: 'int' 'main' '(' ')' Block
	;

FuncType 
	: 'void'
	| BType
	;

FuncFParams 
	: FuncFParam { ',' FuncFParam }
	;

FuncFParam 
	: BType Ident ['[' ']']
	;

Block 
	: '{' { BlockItem } '}'
	;

BlockItem 
	: Decl
	| Stmt
	;

Stmt 
	: LVal '=' Exp ';'
	| [Exp] ';'
	| Block
	| 'if' '(' Cond ')' Stmt [ 'else' Stmt ]
	| 'for' '(' [ForStmt] ';' [Cond] ';' [ForStmt] ')' Stmt
	| 'break' ';'
	| 'continue' ';'
	| 'return' [Exp] ';'
	| LVal '=' 'getint' '(' ')' ';'
	| LVal '=' 'getchar' '(' ')' ';'
	| 'printf' '('StringConst { ',' Exp } ')' ';'
	;

ForStmt 
	: LVal '=' Exp
	;

Exp 
	: AddExp
	;
 
Cond 
	: LOrExp
	;

LVal 
	: Ident ['[' Exp ']']
	;

PrimaryExp 
	: '(' Exp ')'
	| LVal
	| Number
	| Character
	;
    
Number 
	: IntConst
	;

Character 
	: CharConst
	;

UnaryExp 
	: PrimaryExp
	| Ident '(' [FuncRParams] ')'
	| UnaryOp UnaryExp
	;

UnaryOp 
	: '+' | '−' | '!'
	;

FuncRParams 
	: Exp { ',' Exp }
	;

MulExp 
	: UnaryExp
	| MulExp ('*' | '/' | '%') UnaryExp
	;

AddExp 
	: MulExp
	| AddExp ('+' | '−') MulExp
	;

RelExp 
	: AddExp
	| RelExp ('<' | '>' | '<=' | '>=') AddExp
	;

EqExp 
	: RelExp
	| EqExp ('==' | '!=') RelExp
	;

LAndExp 
	: EqExp
	| LAndExp '&&' EqExp
	;

LOrExp 
	: LAndExp
	| LOrExp '||' LAndExp
	;

ConstExp 
	: AddExp
	;

Ident
	: IdentNonDigit
	| Ident IdentNonDigit
	| Ident Digit
	;

IdentNonDigit
	: REGEX( [_a-zA-Z] )
	;

IntConst
	: '0'
	| DecimalConst
	;

DecimalConst
	: NonZeroDigit
	| DecimalConst Digit
	;

Digit
	: REGEX( [0-9] )
	;

CharConst
	: '\'' Ascii '\''
	;

StringConst
	: '\"' { Ascii } '\"'
	;

Ascii
	: ASCII(32-126)
	| ASCII(7-10)
	| ASCII(0)
	| ASCII(92)
	;
